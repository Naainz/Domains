---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <div class="container mx-auto mt-10">
    <h1 class="text-4xl font-bold mb-6 text-center">Check Domain Availability</h1>
    <div class="flex flex-col items-center">
      <div class="flex justify-center">
        <input 
          type="text" 
          placeholder="Enter domain name" 
          class="w-80 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          id="domain-input"
        />
        <button 
          class="ml-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition" 
          id="check-button"
        >
          Check
        </button>
      </div>
      <p class="mt-2 text-sm text-blue-500 cursor-pointer" id="expand-search-options">...or search differently</p>
      <div id="search-options" class="hidden mt-4">
        <div class="flex flex-col">
          <div>
            <label class="block text-sm font-medium text-gray-700">Search by Nameservers</label>
            <input 
              type="text" 
              placeholder="Enter nameserver (at least one required)" 
              class="w-80 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mt-2"
              id="nameserver-input"
            />
          </div>
          <div class="mt-4">
            <label class="block text-sm font-medium text-gray-700">Search by Registrar Name</label>
            <input 
              type="text" 
              placeholder="Enter registrar name" 
              class="w-80 px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 mt-2"
              id="registrar-input"
            />
          </div>
        </div>
        <button 
          class="mt-4 px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition"
          id="search-alternative-button"
        >
          Search
        </button>
      </div>
    </div>
    <div id="result-container" class="mt-6 text-center"></div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      let domain = '';
      const validTLDs = [
        'com', 'net', 'org', 'edu', 'gov', 'co', 'io', 'biz', 'info', 'me', 'us', 'uk', 'ca', 'de', 'jp', 'fr',
        'au', 'eu', 'cn', 'in', 'br', 'ru', 'za', 'nz'
      ];

      const domainInput = document.getElementById('domain-input');
      const checkButton = document.getElementById('check-button');
      const expandSearchOptions = document.getElementById('expand-search-options');
      const searchOptions = document.getElementById('search-options');
      const nameserverInput = document.getElementById('nameserver-input');
      const registrarInput = document.getElementById('registrar-input');
      const resultContainer = document.getElementById('result-container');

      expandSearchOptions.addEventListener('click', () => {
        searchOptions.classList.toggle('hidden');
      });

      const isValidTLD = (domain) => {
        const parts = domain.split('.');
        if (parts.length < 2) return false;
        const tld = parts[parts.length - 1].toLowerCase();
        return validTLDs.includes(tld);
      };

      const showLoading = () => {
        resultContainer.innerHTML = `
          <div class="flex justify-center items-center space-x-2">
            <div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-8 w-8"></div>
            <p class="text-blue-500">I'm searching for the domain name "${domain}"'s availability, please wait...</p>
          </div>
        `;
      };

      const displayResults = (availabilityText, whoisData, isNotRegistered) => {
        const buyButton = isNotRegistered
          ? `<a href="https://www.godaddy.com/domainsearch/find?domainToCheck=${domain}" target="_blank" class="ml-auto bg-green-500 text-white px-4 py-2 rounded-md flex items-center hover:bg-green-600 transition">
              <img src="godaddy.svg" alt="GoDaddy" class="w-6 h-6 mr-2">Buy with GoDaddy
            </a>`
          : '';
        
        resultContainer.innerHTML = `
          <div class="p-4 mb-4 border rounded-md shadow-sm text-left hover:bg-gray-100">
            <h2 class="font-bold">${domain}</h2>
            ${availabilityText}
            ${buyButton}
            <button class="mt-2 text-blue-500 text-sm" onclick="toggleVisibility('whois-data')">Show WHOIS Data</button>
            <div id="whois-data" class="hidden mt-2 bg-gray-800 text-white p-2 rounded-md overflow-x-auto">
              <pre class="whitespace-pre">${whoisData}</pre>
            </div>
            <button class="mt-2 text-blue-500 text-sm" onclick="fetchDnsData('${domain}', 0)">DNS</button>
            <div id="dns-data-0" class="hidden mt-2 bg-gray-800 text-white p-2 rounded-md overflow-x-auto">
              <pre class="whitespace-pre">No DNS data fetched yet.</pre>
            </div>
          </div>
        `;
      };

      window.toggleVisibility = (id) => {
        const element = document.getElementById(id);
        if (element) {
          element.classList.toggle('hidden');
        }
      };

      window.fetchDnsData = async (domainName, index) => {
        const dnsDataDiv = document.getElementById(`dns-data-${index}`);
        if (dnsDataDiv) {
          try {
            const response = await fetch(`/api/dns.json?domain=${domainName}`);
            const result = await response.json();
            dnsDataDiv.innerHTML = `<pre class="whitespace-pre">${result.dnsData || 'No DNS records available.'}</pre>`;
            dnsDataDiv.classList.remove('hidden');
          } catch (error) {
            dnsDataDiv.innerHTML = `<pre class="whitespace-pre">Error retrieving DNS data.</pre>`;
            dnsDataDiv.classList.remove('hidden');
          }
        }
      };

      const fetchWhoisData = async (domainName) => {
        showLoading();
        try {
          const response = await fetch(`/api/check-domain.json?domain=${domainName}`);
          const result = await response.json();
          const whoisData = result.whoisData || 'No WHOIS data available.';

          const firstLine = whoisData.split('\n')[0].toLowerCase();
          const isNotRegistered = firstLine.includes('not found') || firstLine.includes('no match');
          const availabilityText = isNotRegistered 
            ? `<p class="font-medium text-green-500">Not Registered</p>`
            : `<p class="font-medium text-red-500">Registered</p>`;

          displayResults(availabilityText, whoisData, isNotRegistered);
        } catch (error) {
          console.error('Error fetching WHOIS data:', error);
          resultContainer.innerHTML = `<p class="text-red-500">Error retrieving WHOIS data for "${domainName}".</p>`;
        }
      };

      checkButton.addEventListener('click', () => {
        domain = domainInput.value.trim();
        
        if (domain.includes(' ')) {
          resultContainer.innerHTML = '<p class="text-red-500">Invalid entry: domain name cannot contain spaces.</p>';
          return;
        }

        if (!isValidTLD(domain)) {
          resultContainer.innerHTML = '<p class="text-red-500">Invalid entry: domain must have a valid TLD.</p>';
          return;
        }

        if (domain) {
          fetchWhoisData(domain);
        }
      });
    });
  </script>

  <style>
    .loader {
      border-top-color: #3498db;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    .overflow-x-auto {
      overflow-x: auto;
    }

    .whitespace-pre {
      white-space: pre;
    }

    .max-w-full {
      max-width: 100%;
    }

    pre {
      max-width: 100%;
      overflow-x: auto;
      white-space: pre-wrap;
    }
  </style>
</Layout>
